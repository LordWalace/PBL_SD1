module ZoomSelection (
    input           clk,
    input           enable,
    input   [1:0]   algorithm,
    input   [7:0]   pixel_in_rom,       // Pixel lido da ROM
    
    // Entradas adicionais para o algoritmo de média de blocos
    input   [7:0]   pixel_in_rom_p1,    // Pixel (x+1, y)
    input   [7:0]   pixel_in_rom_p2,    // Pixel (x, y+1)
    input   [7:0]   pixel_in_rom_p3,    // Pixel (x+1, y+1)
    output reg [7:0]  pixel_out,
    output reg [15:0] read_addr,
    output reg [15:0] write_addr,
    output reg        done
);

    // --- Sinais de saída de cada módulo de algoritmo ---
    wire [7:0]  pixel_out_nn, pixel_out_pr, pixel_out_dec, pixel_out_avg;
    wire [15:0] read_addr_nn, read_addr_pr, read_addr_dec, read_addr_avg;
    wire [15:0] write_addr_nn, write_addr_pr, write_addr_dec, write_addr_avg;
    wire        done_nn, done_pr, done_dec, done_avg;

    // --- Instanciação dos 4 módulos de algoritmo ---

    zoom_in_nearest_neighbor u_nn (
        .clk(clk), .enable(enable), .pixel_in(pixel_in_rom),
        .pixel_out(pixel_out_nn), .read_addr(read_addr_nn), .write_addr(write_addr_nn), .done(done_nn)
    );

    zoom_in_pixel_replication u_pr (
        .clk(clk), .enable(enable), .pixel_in(pixel_in_rom),
        .pixel_out(pixel_out_pr), .read_addr(read_addr_pr), .write_addr(write_addr_pr), .done(done_pr)
    );

    zoom_out_decimation u_dec (
        .clk(clk), .enable(enable), .pixel_in(pixel_in_rom),
        .pixel_out(pixel_out_dec), .read_addr(read_addr_dec), .write_addr(write_addr_dec), .done(done_dec)
    );

    zoom_out_block_averaging u_avg (
        .clk(clk), .enable(enable),
        .pixel_in_p0(pixel_in_rom), .pixel_in_p1(pixel_in_rom_p1),
        .pixel_in_p2(pixel_in_rom_p2), .pixel_in_p3(pixel_in_rom_p3),
        .pixel_out(pixel_out_avg), .read_addr(read_addr_avg), .write_addr(write_addr_avg), .done(done_avg)
    );

    // --- Multiplexador para selecionar a saída correta ---
    always @(*) begin
        case (algorithm)
            'b00: begin // Vizinho Mais Próximo
                pixel_out  = pixel_out_nn;
                read_addr  = read_addr_nn;
                write_addr = write_addr_nn;
                done       = done_nn;
            end
            'b01: begin // Replicação de Pixel
                pixel_out  = pixel_out_pr;
                read_addr  = read_addr_pr;
                write_addr = write_addr_pr;
                done       = done_pr;
            end
            'b10: begin // Decimação
                pixel_out  = pixel_out_dec;
                read_addr  = read_addr_dec;
                write_addr = write_addr_dec;
                done       = done_dec;
            end
            'b11: begin // Média de Blocos
                pixel_out  = pixel_out_avg;
                read_addr  = read_addr_avg;
                write_addr = write_addr_avg;
                done       = done_avg;
            end
            default: begin
                pixel_out  = 8'h00;
                read_addr  = 16'h00;
                write_addr = 16'h00;
                done       = 1'b1;
            end
        endcase
    end
endmodule